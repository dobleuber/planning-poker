input AddToCardSelectionCardsCardInput {
  selectionsCardSelectionId: ID!
  cardCardId: ID!
  clientMutationId: String!
}

type AddToCardSelectionCardsPayload {
  viewer: Viewer!
  clientMutationId: String!
  cardCard: Card
  selectionsCardSelection: CardSelection
  cardCardEdge: CardEdge
  selectionsCardSelectionEdge: CardSelectionEdge
}

input AddToDeckCardsDeckTypeInput {
  cardsCardId: ID!
  deckTypeDeckTypeId: ID!
  clientMutationId: String!
}

type AddToDeckCardsPayload {
  viewer: Viewer!
  clientMutationId: String!
  deckTypeDeckType: DeckType
  cardsCard: Card
  deckTypeDeckTypeEdge: DeckTypeEdge
  cardsCardEdge: CardEdge
}

type AddToDeckTypeProjectsPayload {
  viewer: Viewer!
  clientMutationId: String!
  projectsProject: Project
  deckTypeDeckType: DeckType
  projectsProjectEdge: ProjectEdge
  deckTypeDeckTypeEdge: DeckTypeEdge
}

input AddToDeckTypeProjectsProjectInput {
  deckTypeDeckTypeId: ID!
  projectsProjectId: ID!
  clientMutationId: String!
}

type AddToProjectCollaboratorsPayload {
  viewer: Viewer!
  clientMutationId: String!
  collaboratorsUser: User
  projectsInvolvedProject: Project
  collaboratorsUserEdge: UserEdge
  projectsInvolvedProjectEdge: ProjectEdge
}

input AddToProjectCollaboratorsUserInput {
  projectsInvolvedProjectId: ID!
  collaboratorsUserId: ID!
  clientMutationId: String!
}

type AddToProjectStoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  projectProject: Project
  projectStory: Story
  projectProjectEdge: ProjectEdge
  projectStoryEdge: StoryEdge
}

input AddToProjectStoryProjectInput {
  projectStoryId: ID!
  projectProjectId: ID!
  clientMutationId: String!
}

type AddToStorySelectionCardsPayload {
  viewer: Viewer!
  clientMutationId: String!
  storyStory: Story
  selectionsCardSelection: CardSelection
  storyStoryEdge: StoryEdge
  selectionsCardSelectionEdge: CardSelectionEdge
}

input AddToStorySelectionCardsStoryInput {
  selectionsCardSelectionId: ID!
  storyStoryId: ID!
  clientMutationId: String!
}

type AddToUserProjectsPayload {
  viewer: Viewer!
  clientMutationId: String!
  createdProjectsProject: Project
  userCreatorUser: User
  createdProjectsProjectEdge: ProjectEdge
  userCreatorUserEdge: UserEdge
}

input AddToUserProjectsProjectInput {
  userCreatorUserId: ID!
  createdProjectsProjectId: ID!
  clientMutationId: String!
}

type AddToUserSelectionCardsPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  selectionsCardSelection: CardSelection
  userUserEdge: UserEdge
  selectionsCardSelectionEdge: CardSelectionEdge
}

input AddToUserSelectionCardsUserInput {
  selectionsCardSelectionId: ID!
  userUserId: ID!
  clientMutationId: String!
}

# AuthenticateUserPayload
type AuthenticateUserPayload {
  id: ID!
  token: String!
}

type Card implements Node {
  deckType(filter: DeckTypeFilter): DeckType
  id: ID!
  label: String!
  selections(filter: CardSelectionFilter, orderBy: CardSelectionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CardSelectionConnection
  value: Float!
}

# A connection to a list of items.
type CardConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CardEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input CarddeckTypeDeckType {
  description: String
  name: String!
  cardsIds: [ID!]
  cards: [DeckTypecardsCard!]
  projectsIds: [ID!]
  projects: [DeckTypeprojectsProject!]
}

# An edge in a connection.
type CardEdge {
  # The item at the end of the edge.
  node: Card!

  # A cursor for use in pagination.
  cursor: String!
}

input CardFilter {
  # Logical AND on all given filters.
  AND: [CardFilter!]

  # Logical OR on all given filters.
  OR: [CardFilter!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  label: String

  # All values that are not equal to given value.
  label_not: String

  # All values that are contained in given list.
  label_in: [String!]

  # All values that are not contained in given list.
  label_not_in: [String!]

  # All values less than the given value.
  label_lt: String

  # All values less than or equal the given value.
  label_lte: String

  # All values greater than the given value.
  label_gt: String

  # All values greater than or equal the given value.
  label_gte: String

  # All values containing the given string.
  label_contains: String

  # All values not containing the given string.
  label_not_contains: String

  # All values starting with the given string.
  label_starts_with: String

  # All values not starting with the given string.
  label_not_starts_with: String

  # All values ending with the given string.
  label_ends_with: String

  # All values not ending with the given string.
  label_not_ends_with: String
  value: Float

  # All values that are not equal to given value.
  value_not: Float

  # All values that are contained in given list.
  value_in: [Float!]

  # All values that are not contained in given list.
  value_not_in: [Float!]

  # All values less than the given value.
  value_lt: Float

  # All values less than or equal the given value.
  value_lte: Float

  # All values greater than the given value.
  value_gt: Float

  # All values greater than or equal the given value.
  value_gte: Float
  deckType: DeckTypeFilter
  selections_every: CardSelectionFilter
  selections_some: CardSelectionFilter
  selections_none: CardSelectionFilter
}

enum CardOrderBy {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  value_ASC
  value_DESC
}

type CardSelection implements Node {
  card(filter: CardFilter): Card
  createdAt: DateTime!
  id: ID!
  isActive: Boolean
  selection: String
  story(filter: StoryFilter): Story!
  updatedAt: DateTime!
  user(filter: UserFilter): User!
}

input CardSelectioncardCard {
  label: String!
  value: Float!
  deckTypeId: ID
  deckType: CarddeckTypeDeckType
  selectionsIds: [ID!]
  selections: [CardselectionsCardSelection!]
}

# A connection to a list of items.
type CardSelectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CardSelectionEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type CardSelectionEdge {
  # The item at the end of the edge.
  node: CardSelection!

  # A cursor for use in pagination.
  cursor: String!
}

input CardSelectionFilter {
  # Logical AND on all given filters.
  AND: [CardSelectionFilter!]

  # Logical OR on all given filters.
  OR: [CardSelectionFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  isActive: Boolean

  # All values that are not equal to given value.
  isActive_not: Boolean
  selection: String

  # All values that are not equal to given value.
  selection_not: String

  # All values that are contained in given list.
  selection_in: [String!]

  # All values that are not contained in given list.
  selection_not_in: [String!]

  # All values less than the given value.
  selection_lt: String

  # All values less than or equal the given value.
  selection_lte: String

  # All values greater than the given value.
  selection_gt: String

  # All values greater than or equal the given value.
  selection_gte: String

  # All values containing the given string.
  selection_contains: String

  # All values not containing the given string.
  selection_not_contains: String

  # All values starting with the given string.
  selection_starts_with: String

  # All values not starting with the given string.
  selection_not_starts_with: String

  # All values ending with the given string.
  selection_ends_with: String

  # All values not ending with the given string.
  selection_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  card: CardFilter
  story: StoryFilter
  user: UserFilter
}

enum CardSelectionOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  isActive_ASC
  isActive_DESC
  selection_ASC
  selection_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CardselectionsCardSelection {
  isActive: Boolean
  selection: String
  storyId: ID
  story: CardSelectionstoryStory
  userId: ID
  user: CardSelectionuserUser
}

input CardSelectionstoryStory {
  estimation: Int
  name: String!
  showEstimation: Boolean
  url: String
  projectId: ID
  project: StoryprojectProject
  selectionsIds: [ID!]
  selections: [StoryselectionsCardSelection!]
}

input CardSelectionuserUser {
  email: String
  password: String!
  username: String!
  createdProjectsIds: [ID!]
  createdProjects: [UsercreatedProjectsProject!]
  projectsInvolvedIds: [ID!]
  projectsInvolved: [UserprojectsInvolvedProject!]
  selectionsIds: [ID!]
  selections: [UserselectionsCardSelection!]
}

# ConvertGuestUserPayload
type ConvertGuestUserPayload {
  id: ID!
  token: String!
}

input CreateCard {
  label: String!
  value: Float!
  deckTypeId: ID
  deckType: CarddeckTypeDeckType
  selectionsIds: [ID!]
  selections: [CardselectionsCardSelection!]
}

input CreateCardInput {
  label: String!
  value: Float!
  deckTypeId: ID
  deckType: CarddeckTypeDeckType
  selectionsIds: [ID!]
  selections: [CardselectionsCardSelection!]
  clientMutationId: String!
}

type CreateCardPayload {
  viewer: Viewer!
  clientMutationId: String!
  card: Card
  edge: CardEdge
  deckType: DeckType
}

input CreateCardSelection {
  isActive: Boolean
  selection: String
  cardId: ID
  card: CardSelectioncardCard
  storyId: ID
  story: CardSelectionstoryStory
  userId: ID
  user: CardSelectionuserUser
}

input CreateCardSelectionInput {
  isActive: Boolean
  selection: String
  cardId: ID
  card: CardSelectioncardCard
  storyId: ID
  story: CardSelectionstoryStory
  userId: ID
  user: CardSelectionuserUser
  clientMutationId: String!
}

type CreateCardSelectionPayload {
  viewer: Viewer!
  clientMutationId: String!
  cardSelection: CardSelection
  edge: CardSelectionEdge
  card: Card
  story: Story
  user: User
}

input CreateDeckType {
  description: String
  name: String!
  cardsIds: [ID!]
  cards: [DeckTypecardsCard!]
  projectsIds: [ID!]
  projects: [DeckTypeprojectsProject!]
}

input CreateDeckTypeInput {
  description: String
  name: String!
  cardsIds: [ID!]
  cards: [DeckTypecardsCard!]
  projectsIds: [ID!]
  projects: [DeckTypeprojectsProject!]
  clientMutationId: String!
}

type CreateDeckTypePayload {
  viewer: Viewer!
  clientMutationId: String!
  deckType: DeckType
  edge: DeckTypeEdge
}

input CreateProject {
  description: String
  name: String!
  deckTypeId: ID
  deckType: ProjectdeckTypeDeckType
  userCreatorId: ID
  userCreator: ProjectuserCreatorUser
  collaboratorsIds: [ID!]
  collaborators: [ProjectcollaboratorsUser!]
  projectIds: [ID!]
  project: [ProjectprojectStory!]
}

input CreateProjectInput {
  description: String
  name: String!
  deckTypeId: ID
  deckType: ProjectdeckTypeDeckType
  userCreatorId: ID
  userCreator: ProjectuserCreatorUser
  collaboratorsIds: [ID!]
  collaborators: [ProjectcollaboratorsUser!]
  projectIds: [ID!]
  project: [ProjectprojectStory!]
  clientMutationId: String!
}

type CreateProjectPayload {
  viewer: Viewer!
  clientMutationId: String!
  project: Project
  edge: ProjectEdge
  deckType: DeckType
  userCreator: User
}

input CreateStory {
  estimation: Int
  name: String!
  showEstimation: Boolean
  url: String
  projectId: ID
  project: StoryprojectProject
  selectionsIds: [ID!]
  selections: [StoryselectionsCardSelection!]
}

input CreateStoryInput {
  estimation: Int
  name: String!
  showEstimation: Boolean
  url: String
  projectId: ID
  project: StoryprojectProject
  selectionsIds: [ID!]
  selections: [StoryselectionsCardSelection!]
  clientMutationId: String!
}

type CreateStoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  story: Story
  edge: StoryEdge
  project: Project
}

input CreateUser {
  email: String
  password: String!
  username: String!
  createdProjectsIds: [ID!]
  createdProjects: [UsercreatedProjectsProject!]
  projectsInvolvedIds: [ID!]
  projectsInvolved: [UserprojectsInvolvedProject!]
  selectionsIds: [ID!]
  selections: [UserselectionsCardSelection!]
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

type DeckType implements Node {
  cards(filter: CardFilter, orderBy: CardOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection
  description: String
  id: ID!
  name: String!
  projects(filter: ProjectFilter, orderBy: ProjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection
}

input DeckTypecardsCard {
  label: String!
  value: Float!
  selectionsIds: [ID!]
  selections: [CardselectionsCardSelection!]
}

# A connection to a list of items.
type DeckTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DeckTypeEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type DeckTypeEdge {
  # The item at the end of the edge.
  node: DeckType!

  # A cursor for use in pagination.
  cursor: String!
}

input DeckTypeFilter {
  # Logical AND on all given filters.
  AND: [DeckTypeFilter!]

  # Logical OR on all given filters.
  OR: [DeckTypeFilter!]
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  cards_every: CardFilter
  cards_some: CardFilter
  cards_none: CardFilter
  projects_every: ProjectFilter
  projects_some: ProjectFilter
  projects_none: ProjectFilter
}

enum DeckTypeOrderBy {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input DeckTypeprojectsProject {
  description: String
  name: String!
  userCreatorId: ID
  userCreator: ProjectuserCreatorUser
  collaboratorsIds: [ID!]
  collaborators: [ProjectcollaboratorsUser!]
  projectIds: [ID!]
  project: [ProjectprojectStory!]
}

input DeleteCardInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCardPayload {
  viewer: Viewer!
  clientMutationId: String!
  card: Card
  edge: CardEdge
  deckType: DeckType
  deletedId: ID
}

input DeleteCardSelectionInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCardSelectionPayload {
  viewer: Viewer!
  clientMutationId: String!
  cardSelection: CardSelection
  edge: CardSelectionEdge
  card: Card
  story: Story
  user: User
  deletedId: ID
}

input DeleteDeckTypeInput {
  id: ID!
  clientMutationId: String!
}

type DeleteDeckTypePayload {
  viewer: Viewer!
  clientMutationId: String!
  deckType: DeckType
  edge: DeckTypeEdge
  deletedId: ID
}

input DeleteProjectInput {
  id: ID!
  clientMutationId: String!
}

type DeleteProjectPayload {
  viewer: Viewer!
  clientMutationId: String!
  project: Project
  edge: ProjectEdge
  deckType: DeckType
  userCreator: User
  deletedId: ID
}

input DeleteStoryInput {
  id: ID!
  clientMutationId: String!
}

type DeleteStoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  story: Story
  edge: StoryEdge
  project: Project
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

# LoggedInUserPayload
type LoggedInUserPayload {
  id: ID!
}

type Mutation {
  createCard(input: CreateCardInput!): CreateCardPayload
  createCardSelection(input: CreateCardSelectionInput!): CreateCardSelectionPayload
  createDeckType(input: CreateDeckTypeInput!): CreateDeckTypePayload
  createProject(input: CreateProjectInput!): CreateProjectPayload
  createStory(input: CreateStoryInput!): CreateStoryPayload
  updateCard(input: UpdateCardInput!): UpdateCardPayload
  updateCardSelection(input: UpdateCardSelectionInput!): UpdateCardSelectionPayload
  updateDeckType(input: UpdateDeckTypeInput!): UpdateDeckTypePayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  updateStory(input: UpdateStoryInput!): UpdateStoryPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateCard(input: UpdateOrCreateCardInput!): UpdateOrCreateCardPayload
  updateOrCreateCardSelection(input: UpdateOrCreateCardSelectionInput!): UpdateOrCreateCardSelectionPayload
  updateOrCreateDeckType(input: UpdateOrCreateDeckTypeInput!): UpdateOrCreateDeckTypePayload
  updateOrCreateProject(input: UpdateOrCreateProjectInput!): UpdateOrCreateProjectPayload
  updateOrCreateStory(input: UpdateOrCreateStoryInput!): UpdateOrCreateStoryPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteCard(input: DeleteCardInput!): DeleteCardPayload
  deleteCardSelection(input: DeleteCardSelectionInput!): DeleteCardSelectionPayload
  deleteDeckType(input: DeleteDeckTypeInput!): DeleteDeckTypePayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  deleteStory(input: DeleteStoryInput!): DeleteStoryPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToCardSelectionCards(input: AddToCardSelectionCardsCardInput!): AddToCardSelectionCardsPayload
  addToDeckCards(input: AddToDeckCardsDeckTypeInput!): AddToDeckCardsPayload
  addToDeckTypeProjects(input: AddToDeckTypeProjectsProjectInput!): AddToDeckTypeProjectsPayload
  addToProjectCollaborators(input: AddToProjectCollaboratorsUserInput!): AddToProjectCollaboratorsPayload
  addToProjectStory(input: AddToProjectStoryProjectInput!): AddToProjectStoryPayload
  addToStorySelectionCards(input: AddToStorySelectionCardsStoryInput!): AddToStorySelectionCardsPayload
  addToUserProjects(input: AddToUserProjectsProjectInput!): AddToUserProjectsPayload
  addToUserSelectionCards(input: AddToUserSelectionCardsUserInput!): AddToUserSelectionCardsPayload
  removeFromCardSelectionCards(input: RemoveFromCardSelectionCardsCardInput!): RemoveFromCardSelectionCardsPayload
  removeFromDeckCards(input: RemoveFromDeckCardsDeckTypeInput!): RemoveFromDeckCardsPayload
  removeFromDeckTypeProjects(input: RemoveFromDeckTypeProjectsProjectInput!): RemoveFromDeckTypeProjectsPayload
  removeFromProjectCollaborators(input: RemoveFromProjectCollaboratorsUserInput!): RemoveFromProjectCollaboratorsPayload
  removeFromProjectStory(input: RemoveFromProjectStoryProjectInput!): RemoveFromProjectStoryPayload
  removeFromUserProjects(input: RemoveFromUserProjectsProjectInput!): RemoveFromUserProjectsPayload
  createUser(input: SignupUserInput!): CreateUserPayload!

  # authenticate
  authenticateUser(email: String!, password: String!): AuthenticateUserPayload

  # convertGuest
  convertGuestUser(id: ID!, email: String!, password: String!, username: String!): ConvertGuestUserPayload

  # signup
  signupUser(email: String!, password: String!, username: String!): SignupUserPayload

  # signupGuest
  signupGuestUser(username: String!): SignupGuestUserPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Project implements Node {
  collaborators(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection
  deckType(filter: DeckTypeFilter): DeckType
  description: String
  id: ID!
  name: String!
  project(filter: StoryFilter, orderBy: StoryOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): StoryConnection
  userCreator(filter: UserFilter): User
}

input ProjectcollaboratorsUser {
  email: String
  password: String!
  username: String!
  createdProjectsIds: [ID!]
  createdProjects: [UsercreatedProjectsProject!]
  projectsInvolvedIds: [ID!]
  projectsInvolved: [UserprojectsInvolvedProject!]
  selectionsIds: [ID!]
  selections: [UserselectionsCardSelection!]
}

# A connection to a list of items.
type ProjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProjectEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input ProjectdeckTypeDeckType {
  description: String
  name: String!
  cardsIds: [ID!]
  cards: [DeckTypecardsCard!]
  projectsIds: [ID!]
  projects: [DeckTypeprojectsProject!]
}

# An edge in a connection.
type ProjectEdge {
  # The item at the end of the edge.
  node: Project!

  # A cursor for use in pagination.
  cursor: String!
}

input ProjectFilter {
  # Logical AND on all given filters.
  AND: [ProjectFilter!]

  # Logical OR on all given filters.
  OR: [ProjectFilter!]
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  collaborators_every: UserFilter
  collaborators_some: UserFilter
  collaborators_none: UserFilter
  deckType: DeckTypeFilter
  project_every: StoryFilter
  project_some: StoryFilter
  project_none: StoryFilter
  userCreator: UserFilter
}

enum ProjectOrderBy {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input ProjectprojectStory {
  estimation: Int
  name: String!
  showEstimation: Boolean
  url: String
  selectionsIds: [ID!]
  selections: [StoryselectionsCardSelection!]
}

input ProjectuserCreatorUser {
  email: String
  password: String!
  username: String!
  createdProjectsIds: [ID!]
  createdProjects: [UsercreatedProjectsProject!]
  projectsInvolvedIds: [ID!]
  projectsInvolved: [UserprojectsInvolvedProject!]
  selectionsIds: [ID!]
  selections: [UserselectionsCardSelection!]
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromCardSelectionCardsCardInput {
  selectionsCardSelectionId: ID!
  cardCardId: ID!
  clientMutationId: String!
}

type RemoveFromCardSelectionCardsPayload {
  viewer: Viewer!
  clientMutationId: String!
  cardCard: Card
  selectionsCardSelection: CardSelection
  cardCardEdge: CardEdge
  selectionsCardSelectionEdge: CardSelectionEdge
}

input RemoveFromDeckCardsDeckTypeInput {
  cardsCardId: ID!
  deckTypeDeckTypeId: ID!
  clientMutationId: String!
}

type RemoveFromDeckCardsPayload {
  viewer: Viewer!
  clientMutationId: String!
  deckTypeDeckType: DeckType
  cardsCard: Card
  deckTypeDeckTypeEdge: DeckTypeEdge
  cardsCardEdge: CardEdge
}

type RemoveFromDeckTypeProjectsPayload {
  viewer: Viewer!
  clientMutationId: String!
  projectsProject: Project
  deckTypeDeckType: DeckType
  projectsProjectEdge: ProjectEdge
  deckTypeDeckTypeEdge: DeckTypeEdge
}

input RemoveFromDeckTypeProjectsProjectInput {
  deckTypeDeckTypeId: ID!
  projectsProjectId: ID!
  clientMutationId: String!
}

type RemoveFromProjectCollaboratorsPayload {
  viewer: Viewer!
  clientMutationId: String!
  collaboratorsUser: User
  projectsInvolvedProject: Project
  collaboratorsUserEdge: UserEdge
  projectsInvolvedProjectEdge: ProjectEdge
}

input RemoveFromProjectCollaboratorsUserInput {
  projectsInvolvedProjectId: ID!
  collaboratorsUserId: ID!
  clientMutationId: String!
}

type RemoveFromProjectStoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  projectProject: Project
  projectStory: Story
  projectProjectEdge: ProjectEdge
  projectStoryEdge: StoryEdge
}

input RemoveFromProjectStoryProjectInput {
  projectStoryId: ID!
  projectProjectId: ID!
  clientMutationId: String!
}

type RemoveFromUserProjectsPayload {
  viewer: Viewer!
  clientMutationId: String!
  createdProjectsProject: Project
  userCreatorUser: User
  createdProjectsProjectEdge: ProjectEdge
  userCreatorUserEdge: UserEdge
}

input RemoveFromUserProjectsProjectInput {
  userCreatorUserId: ID!
  createdProjectsProjectId: ID!
  clientMutationId: String!
}

# SignupGuestUserPayload
type SignupGuestUserPayload {
  id: ID!
  token: String!
}

input SignupUserInput {
  email: String
  password: String!
  username: String!
  createdProjectsIds: [ID!]
  createdProjects: [UsercreatedProjectsProject!]
  projectsInvolvedIds: [ID!]
  projectsInvolved: [UserprojectsInvolvedProject!]
  selectionsIds: [ID!]
  selections: [UserselectionsCardSelection!]
  clientMutationId: String!
}

# SignupUserPayload
type SignupUserPayload {
  id: ID!
  token: String!
}

type Story implements Node {
  estimation: Int
  id: ID!
  name: String!
  project(filter: ProjectFilter): Project
  selections(filter: CardSelectionFilter, orderBy: CardSelectionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CardSelectionConnection
  showEstimation: Boolean
  url: String
}

# A connection to a list of items.
type StoryConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StoryEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type StoryEdge {
  # The item at the end of the edge.
  node: Story!

  # A cursor for use in pagination.
  cursor: String!
}

input StoryFilter {
  # Logical AND on all given filters.
  AND: [StoryFilter!]

  # Logical OR on all given filters.
  OR: [StoryFilter!]
  estimation: Int

  # All values that are not equal to given value.
  estimation_not: Int

  # All values that are contained in given list.
  estimation_in: [Int!]

  # All values that are not contained in given list.
  estimation_not_in: [Int!]

  # All values less than the given value.
  estimation_lt: Int

  # All values less than or equal the given value.
  estimation_lte: Int

  # All values greater than the given value.
  estimation_gt: Int

  # All values greater than or equal the given value.
  estimation_gte: Int
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  showEstimation: Boolean

  # All values that are not equal to given value.
  showEstimation_not: Boolean
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
  project: ProjectFilter
  selections_every: CardSelectionFilter
  selections_some: CardSelectionFilter
  selections_none: CardSelectionFilter
}

enum StoryOrderBy {
  estimation_ASC
  estimation_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  showEstimation_ASC
  showEstimation_DESC
  url_ASC
  url_DESC
}

input StoryprojectProject {
  description: String
  name: String!
  deckTypeId: ID
  deckType: ProjectdeckTypeDeckType
  userCreatorId: ID
  userCreator: ProjectuserCreatorUser
  collaboratorsIds: [ID!]
  collaborators: [ProjectcollaboratorsUser!]
  projectIds: [ID!]
  project: [ProjectprojectStory!]
}

input StoryselectionsCardSelection {
  isActive: Boolean
  selection: String
  cardId: ID
  card: CardSelectioncardCard
  userId: ID
  user: CardSelectionuserUser
}

input UpdateCard {
  id: ID!
  label: String
  value: Float
  deckTypeId: ID
  deckType: CarddeckTypeDeckType
  selectionsIds: [ID!]
  selections: [CardselectionsCardSelection!]
}

input UpdateCardInput {
  id: ID!
  label: String
  value: Float
  deckTypeId: ID
  deckType: CarddeckTypeDeckType
  selectionsIds: [ID!]
  selections: [CardselectionsCardSelection!]
  clientMutationId: String!
}

type UpdateCardPayload {
  viewer: Viewer!
  clientMutationId: String!
  card: Card
  edge: CardEdge
  deckType: DeckType
}

input UpdateCardSelection {
  id: ID!
  isActive: Boolean
  selection: String
  cardId: ID
  card: CardSelectioncardCard
  storyId: ID
  story: CardSelectionstoryStory
  userId: ID
  user: CardSelectionuserUser
}

input UpdateCardSelectionInput {
  id: ID!
  isActive: Boolean
  selection: String
  cardId: ID
  card: CardSelectioncardCard
  storyId: ID
  story: CardSelectionstoryStory
  userId: ID
  user: CardSelectionuserUser
  clientMutationId: String!
}

type UpdateCardSelectionPayload {
  viewer: Viewer!
  clientMutationId: String!
  cardSelection: CardSelection
  edge: CardSelectionEdge
  card: Card
  story: Story
  user: User
}

input UpdateDeckType {
  description: String
  id: ID!
  name: String
  cardsIds: [ID!]
  cards: [DeckTypecardsCard!]
  projectsIds: [ID!]
  projects: [DeckTypeprojectsProject!]
}

input UpdateDeckTypeInput {
  description: String
  id: ID!
  name: String
  cardsIds: [ID!]
  cards: [DeckTypecardsCard!]
  projectsIds: [ID!]
  projects: [DeckTypeprojectsProject!]
  clientMutationId: String!
}

type UpdateDeckTypePayload {
  viewer: Viewer!
  clientMutationId: String!
  deckType: DeckType
  edge: DeckTypeEdge
}

input UpdateOrCreateCardInput {
  update: UpdateCard!
  create: CreateCard!
  clientMutationId: String!
}

type UpdateOrCreateCardPayload {
  viewer: Viewer!
  clientMutationId: String!
  card: Card
  edge: CardEdge
  deckType: DeckType
}

input UpdateOrCreateCardSelectionInput {
  update: UpdateCardSelection!
  create: CreateCardSelection!
  clientMutationId: String!
}

type UpdateOrCreateCardSelectionPayload {
  viewer: Viewer!
  clientMutationId: String!
  cardSelection: CardSelection
  edge: CardSelectionEdge
  card: Card
  story: Story
  user: User
}

input UpdateOrCreateDeckTypeInput {
  update: UpdateDeckType!
  create: CreateDeckType!
  clientMutationId: String!
}

type UpdateOrCreateDeckTypePayload {
  viewer: Viewer!
  clientMutationId: String!
  deckType: DeckType
  edge: DeckTypeEdge
}

input UpdateOrCreateProjectInput {
  update: UpdateProject!
  create: CreateProject!
  clientMutationId: String!
}

type UpdateOrCreateProjectPayload {
  viewer: Viewer!
  clientMutationId: String!
  project: Project
  edge: ProjectEdge
  deckType: DeckType
  userCreator: User
}

input UpdateOrCreateStoryInput {
  update: UpdateStory!
  create: CreateStory!
  clientMutationId: String!
}

type UpdateOrCreateStoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  story: Story
  edge: StoryEdge
  project: Project
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  create: CreateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdateProject {
  description: String
  id: ID!
  name: String
  deckTypeId: ID
  deckType: ProjectdeckTypeDeckType
  userCreatorId: ID
  userCreator: ProjectuserCreatorUser
  collaboratorsIds: [ID!]
  collaborators: [ProjectcollaboratorsUser!]
  projectIds: [ID!]
  project: [ProjectprojectStory!]
}

input UpdateProjectInput {
  description: String
  id: ID!
  name: String
  deckTypeId: ID
  deckType: ProjectdeckTypeDeckType
  userCreatorId: ID
  userCreator: ProjectuserCreatorUser
  collaboratorsIds: [ID!]
  collaborators: [ProjectcollaboratorsUser!]
  projectIds: [ID!]
  project: [ProjectprojectStory!]
  clientMutationId: String!
}

type UpdateProjectPayload {
  viewer: Viewer!
  clientMutationId: String!
  project: Project
  edge: ProjectEdge
  deckType: DeckType
  userCreator: User
}

input UpdateStory {
  estimation: Int
  id: ID!
  name: String
  showEstimation: Boolean
  url: String
  projectId: ID
  project: StoryprojectProject
  selectionsIds: [ID!]
  selections: [StoryselectionsCardSelection!]
}

input UpdateStoryInput {
  estimation: Int
  id: ID!
  name: String
  showEstimation: Boolean
  url: String
  projectId: ID
  project: StoryprojectProject
  selectionsIds: [ID!]
  selections: [StoryselectionsCardSelection!]
  clientMutationId: String!
}

type UpdateStoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  story: Story
  edge: StoryEdge
  project: Project
}

input UpdateUser {
  email: String
  id: ID!
  password: String
  username: String
  createdProjectsIds: [ID!]
  createdProjects: [UsercreatedProjectsProject!]
  projectsInvolvedIds: [ID!]
  projectsInvolved: [UserprojectsInvolvedProject!]
  selectionsIds: [ID!]
  selections: [UserselectionsCardSelection!]
}

input UpdateUserInput {
  email: String
  id: ID!
  password: String
  username: String
  createdProjectsIds: [ID!]
  createdProjects: [UsercreatedProjectsProject!]
  projectsInvolvedIds: [ID!]
  projectsInvolved: [UserprojectsInvolvedProject!]
  selectionsIds: [ID!]
  selections: [UserselectionsCardSelection!]
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  createdAt: DateTime!
  createdProjects(filter: ProjectFilter, orderBy: ProjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection
  email: String
  id: ID!
  password: String!
  projectsInvolved(filter: ProjectFilter, orderBy: ProjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection
  selections(filter: CardSelectionFilter, orderBy: CardSelectionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CardSelectionConnection
  updatedAt: DateTime!
  username: String!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input UsercreatedProjectsProject {
  description: String
  name: String!
  deckTypeId: ID
  deckType: ProjectdeckTypeDeckType
  collaboratorsIds: [ID!]
  collaborators: [ProjectcollaboratorsUser!]
  projectIds: [ID!]
  project: [ProjectprojectStory!]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  username: String

  # All values that are not equal to given value.
  username_not: String

  # All values that are contained in given list.
  username_in: [String!]

  # All values that are not contained in given list.
  username_not_in: [String!]

  # All values less than the given value.
  username_lt: String

  # All values less than or equal the given value.
  username_lte: String

  # All values greater than the given value.
  username_gt: String

  # All values greater than or equal the given value.
  username_gte: String

  # All values containing the given string.
  username_contains: String

  # All values not containing the given string.
  username_not_contains: String

  # All values starting with the given string.
  username_starts_with: String

  # All values not starting with the given string.
  username_not_starts_with: String

  # All values ending with the given string.
  username_ends_with: String

  # All values not ending with the given string.
  username_not_ends_with: String
  createdProjects_every: ProjectFilter
  createdProjects_some: ProjectFilter
  createdProjects_none: ProjectFilter
  projectsInvolved_every: ProjectFilter
  projectsInvolved_some: ProjectFilter
  projectsInvolved_none: ProjectFilter
  selections_every: CardSelectionFilter
  selections_some: CardSelectionFilter
  selections_none: CardSelectionFilter
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

input UserprojectsInvolvedProject {
  description: String
  name: String!
  deckTypeId: ID
  deckType: ProjectdeckTypeDeckType
  userCreatorId: ID
  userCreator: ProjectuserCreatorUser
  collaboratorsIds: [ID!]
  collaborators: [ProjectcollaboratorsUser!]
  projectIds: [ID!]
  project: [ProjectprojectStory!]
}

input UserselectionsCardSelection {
  isActive: Boolean
  selection: String
  cardId: ID
  card: CardSelectioncardCard
  storyId: ID
  story: CardSelectionstoryStory
}

# This is the famous Relay viewer object
type Viewer {
  allCards(filter: CardFilter, orderBy: CardOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  allCardSelections(filter: CardSelectionFilter, orderBy: CardSelectionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CardSelectionConnection!
  allDeckTypes(filter: DeckTypeFilter, orderBy: DeckTypeOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): DeckTypeConnection!
  allProjects(filter: ProjectFilter, orderBy: ProjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  allStories(filter: StoryFilter, orderBy: StoryOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): StoryConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Card(id: ID): Card
  CardSelection(id: ID): CardSelection
  DeckType(id: ID): DeckType
  Project(id: ID): Project
  Story(id: ID): Story
  User(email: String, id: ID): User

  # loggedInUser
  loggedInUser: LoggedInUserPayload
  id: ID!
}

type Subscription {
  Story(filter: StorySubscriptionFilter): StorySubscriptionPayload
  CardSelection(filter: CardSelectionSubscriptionFilter): CardSelectionSubscriptionPayload
}

input StorySubscriptionFilter {
  mutation_in: [_ModelMutationType!]
}

type StorySubscriptionPayload {
  mutation: _ModelMutationType!
  node: Story
  updatedFields: [String!]
  previousValues: Story
}

input CardSelectionSubscriptionFilter {
  mutation_in: [_ModelMutationType!]
}

type CardSelectionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: CardSelection
  updatedFields: [String!]
  previousValues: CardSelection
}

enum _ModelMutationType {
  CREATED
  UPDATED
  DELETED
}